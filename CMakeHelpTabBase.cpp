//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "CMakeHelpTabBase.h"


// Declare the bitmap loading function
extern void wxCrafter0j4pQ3InitBitmapResources();

static bool bBitmapLoaded = false;


CMakeHelpTabBase::CMakeHelpTabBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter0j4pQ3InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerMain);
    
    wxBoxSizer* boxSizerLine = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerMain->Add(boxSizerLine, 0, wxALL|wxEXPAND, 0);
    
    m_staticTextVersion = new wxStaticText(this, wxID_ANY, _("Version:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerLine->Add(m_staticTextVersion, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_staticTextVersionValue = new wxStaticText(this, wxID_ANY, _("?"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerLine->Add(m_staticTextVersionValue, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    boxSizerLine->Add(0, 0, 1, wxALL, 5);
    
    m_buttonReload = new wxButton(this, wxID_ANY, _("Reload"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_buttonReload->SetToolTip(_("Reloads Help from CMake"));
    
    boxSizerLine->Add(m_buttonReload, 0, wxALL, 5);
    
    wxArrayString m_radioBoxTopicArr;
    m_radioBoxTopicArr.Add(wxT("Modules"));
    m_radioBoxTopicArr.Add(wxT("Commands"));
    m_radioBoxTopicArr.Add(wxT("Properties"));
    m_radioBoxTopicArr.Add(wxT("Variables"));
    m_radioBoxTopic = new wxRadioBox(this, wxID_ANY, _("Topic"), wxDefaultPosition, wxSize(-1,-1), m_radioBoxTopicArr, 1, 0);
    m_radioBoxTopic->SetSelection(0);
    
    boxSizerMain->Add(m_radioBoxTopic, 0, wxALL|wxEXPAND, 5);
    
    m_splitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxSP_3D);
    m_splitter->SetSashGravity(0.3);
    m_splitter->SetMinimumPaneSize(100);
    
    boxSizerMain->Add(m_splitter, 1, wxALL|wxEXPAND, 5);
    
    m_splitterPageList = new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    wxBoxSizer* boxSizerList = new wxBoxSizer(wxVERTICAL);
    m_splitterPageList->SetSizer(boxSizerList);
    
    m_searchCtrlFilter = new wxSearchCtrl(m_splitterPageList, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_searchCtrlFilter->SetFocus();
    m_searchCtrlFilter->ShowSearchButton(true);
    m_searchCtrlFilter->ShowCancelButton(false);
    
    boxSizerList->Add(m_searchCtrlFilter, 0, wxBOTTOM|wxEXPAND, 5);
    m_searchCtrlFilter->SetMinSize(wxSize(-1,22));
    
    wxArrayString m_listBoxListArr;
    m_listBoxList = new wxListBox(m_splitterPageList, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_listBoxListArr, wxLB_SINGLE);
    
    boxSizerList->Add(m_listBoxList, 1, wxALL|wxEXPAND, 0);
    m_listBoxList->SetMinSize(wxSize(100,200));
    
    m_splitterPageText = new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_splitter->SplitHorizontally(m_splitterPageList, m_splitterPageText, 100);
    
    wxBoxSizer* boxSizerText = new wxBoxSizer(wxVERTICAL);
    m_splitterPageText->SetSizer(boxSizerText);
    
    m_htmlWinText = new wxHtmlWindow(m_splitterPageText, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxHW_SCROLLBAR_AUTO|wxBORDER_THEME);
    m_htmlWinText->SetPage(wxT(""));
    
    boxSizerText->Add(m_htmlWinText, 1, wxALL|wxEXPAND, 0);
    
    SetMinSize( wxSize(300,400) );
    SetSizeHints(300,400);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_buttonReload->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CMakeHelpTabBase::OnReload), NULL, this);
    m_radioBoxTopic->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CMakeHelpTabBase::OnChangeTopic), NULL, this);
    m_splitter->Connect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(CMakeHelpTabBase::OnRightClick), NULL, this);
    m_searchCtrlFilter->Connect(wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN, wxCommandEventHandler(CMakeHelpTabBase::OnSearch), NULL, this);
    m_searchCtrlFilter->Connect(wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN, wxCommandEventHandler(CMakeHelpTabBase::OnSearchCancel), NULL, this);
    m_listBoxList->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(CMakeHelpTabBase::OnSelect), NULL, this);
    m_listBoxList->Connect(wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(CMakeHelpTabBase::OnInsert), NULL, this);
    
}

CMakeHelpTabBase::~CMakeHelpTabBase()
{
    m_buttonReload->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CMakeHelpTabBase::OnReload), NULL, this);
    m_radioBoxTopic->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CMakeHelpTabBase::OnChangeTopic), NULL, this);
    m_splitter->Disconnect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(CMakeHelpTabBase::OnRightClick), NULL, this);
    m_searchCtrlFilter->Disconnect(wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN, wxCommandEventHandler(CMakeHelpTabBase::OnSearch), NULL, this);
    m_searchCtrlFilter->Disconnect(wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN, wxCommandEventHandler(CMakeHelpTabBase::OnSearchCancel), NULL, this);
    m_listBoxList->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(CMakeHelpTabBase::OnSelect), NULL, this);
    m_listBoxList->Disconnect(wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(CMakeHelpTabBase::OnInsert), NULL, this);
    
}
